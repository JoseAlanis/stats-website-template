{
  "hash": "04879f55845ea54ae6cfd0d0bb5113f9",
  "result": {
    "markdown": "---\ntitle: \"MLM Seminar - Sitzung 3\"\nsubtitle: \"Lineare Regression - Modellspezifikation und Modellparameter\"\nfooter:  \"[Fortgeschrittene statistische Methoden II](https://josealanis.github.io/stats-website-template/)\"\n# logo: \"images/mlm-formula.png\"\neditor: visual\nformat: \n  revealjs:\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    slide-level: 3\n    smaller: true\n    scrollable: true\nexecute:\n  freeze: auto\n---\n\n\n## Ziele\n\nAm Ende des heutigen Termins sollten wir folgede Fragen beantworten können:\n\n-   Wie unterschiedet sich eine einfache (lineare) Regression von einem Multi-Level Modell?\n-   Mit welchen Werten (Modellparameter) kann man die Aussagen eines Modells untersuchen?\n    -   Welche Modellparameter gibt es?\n    -   Was sagen sie aus?\n    -   Wie interpretiert man die Modellparameter **Intercept** und **Steigung**.\n-   Was versteht man unter *\"Fixed-Effects\"* und was sind *\"Fixed-Effects Modelle\"*?\n\n## Rückblick zur letzten Stunde\n\nKonzequenzen hierarchisch organisierter Daten:\n\n-   Beobachtungen innerhalb einer Gruppe (auch \"Einheit\", oder *\"unit\"* genannt) ähneln sich stärker als die zwischen den Einheiten.\n-   Dies verletzt die Unabhängigkeitsannahme der einfachen Regression\n    -   Viele Beobachtungen beeinflüssen sich gegenseitig oder werden in gleichermaßen beeinflüsst.\n    -   Die **Beobachtungen** sind also **nicht von einander unabhängig**.\n\n<center>\n![](../images/multilevel-data.png){fig-alt=\"Multilevel data.\" width=\"50%\"}\n</center>\n\n## Die Grundidee eines Regressionsmodells\n\n-   Die Ausprägung einer Variable hängt von der Ausprägung einer anderen Variable (oder Kombination von Variablen) ab.\n\n-   Das Modell $Y=f(x)+Error$:\n\n    -   Erklärt $Y$ anhand von $x$.\n        -   Wenn man $x$ transformiert (i.e., $f(x)$) bekommt man einer Schätzung von $Y$.\n\n## Beispiel 1\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lab-1_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Beispiel 1 (linear model)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequire(MASS)\nrequire(ggplot2)\n\nggplot(data = nlschools, aes(x = SES, y = IQ)) +\n    geom_point(ize = 0.8) +\n    geom_smooth(method = 'lm') +\n    theme_linedraw() +\n    coord_cartesian(ylim = c(0, 20)) +\n    labs(y = 'Test Score') +\n    theme(axis.text = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![](lab-1_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Die Fragestellung einer linearen Regression {.scrollable}\n\n:::: {.columns}\n\n::: {.column width=\"65%\"}\nEs soll untersucht werden, wie sich eine Variable $X$ auf eine Variable $Y$ auswirkt.\n\nIn unseren Beispiel:\n\n- Soziökonomischer Status (**SES**) von Schüler:innen ($X$) wirkt sich auf die Perfomanz (**Test Score**)\nder Schüler:innen in einem Test ($Y$).\n\n- Auf der $Y$-Achse sehen wir die Performanz.\n  - Das ist die Variable, die vorhergesagt werden soll (auch *Kriterium*, oder *Antwortvariable* genannt).\n\n- Auf der $X$-Achse sehen wir die Prädiktor-Varible (das womit wir Performanz vorhersagen wollen).\n:::\n\n::: {.column width=\"35%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lab-1_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n\n::::\n\n## Modelparameter {.scrollable}\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n**$\\beta_{0}$**\n<br>\nDer Intercept des Modells (AKA - der y-Achsen-Abschnitt).\n$\\beta_{0}$ kann auch als: “Der Wert von $Y$, wenn $X$ = 0 ist”.\n- Oder, die Antwort auf die Frage: Welche Perfomanz zeigt eine Schüler:in,\nwenn sie ein Wert von 0 auf SES hat.\n\n**$\\beta_{1}$**\n<br>\nDer effekt vom Prädiktor $X$ (AKA - Die Steigung der Regressionsgerade)\n$\\beta_{1}$ kann folgendermaßen vertanden werden:\n- Wenn SES um eine Einheit steigt (also von 0 zu 1), steigt die Performanz (im Mittel)\num das $\\beta_{1}$-fache.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequire(MASS)\nrequire(ggplot2)\n\nmodel <- lm(data = nlschools, IQ ~ SES)\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = IQ ~ SES, data = nlschools)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.2659 -1.1651  0.0345  1.2147  6.4551 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 10.163000   0.112430   90.39   <2e-16 ***\nSES          0.060084   0.003764   15.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.963 on 2285 degrees of freedom\nMultiple R-squared:  0.1004,\tAdjusted R-squared:  0.09996 \nF-statistic: 254.9 on 1 and 2285 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lab-1_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n\n::::\n\n## Modelvorhersahen\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequire(MASS)\nrequire(ggplot2)\n\nb0 = 10.163000\nb1 = 0.060084\nx = c(15, 25)\n\nvorhersagen <- b0 + b1 * x\nvorhersagen_df <- data.frame(SES = x, IQ = vorhersagen)\n\nggplot(data = nlschools, aes(x = SES, y = IQ)) +\n    geom_point(size = 0.8, alpha = 0.5, color = 'gray') +\n    geom_smooth(method = 'lm', alpha = 0.75) +\n    geom_point(data = vorhersagen_df, size = 2.0, color = 'red', shape = 8) +\n    theme_linedraw() +\n    coord_cartesian(ylim = c(0, 20)) +\n    labs(y = 'Test Score') +\n    theme(axis.text = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![](lab-1_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=576}\n:::\n:::\n",
    "supporting": [
      "lab-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}